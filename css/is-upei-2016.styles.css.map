{"version":3,"sources":["_init.scss","libraries/neat/grid/_box-sizing.scss","is-upei-2016.styles.scss","base/_variables.scss","base/_buttons.scss","libraries/bourbon/addons/_font-stacks.scss","libraries/bourbon/functions/_shade.scss","base/_forms.scss","libraries/bourbon/functions/_tint.scss","base/_lists.scss","base/_tables.scss","base/_typography.scss","libraries/neat/grid/_media.scss","components/_footer.scss","components/_header.scss","../node_modules/compass-mixins/lib/compass/reset/_utilities.scss","libraries/bourbon/addons/_clearfix.scss","../node_modules/compass-mixins/lib/compass/typography/lists/_bullets.scss","../node_modules/compass-mixins/lib/compass/typography/lists/_horizontal-list.scss","../node_modules/compass-mixins/lib/compass/utilities/general/_float.scss","libraries/neat/grid/_outer-container.scss","libraries/neat/grid/_span-columns.scss","libraries/neat/grid/_private.scss","components/_search.scss","components/_test.scss"],"names":[],"mappings":"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","file":"is-upei-2016.styles.css","sourcesContent":["// Import variables and mixins to be used (Bourbon).\n@import \"libraries/bourbon/bourbon\";\n@import \"libraries/neat/neat-helpers\";\n\n\n/*\n// Turn on Neat's visual grid for development.\n$visual-grid:       false;\n$visual-grid-color: #EEEEEE;\n// Set to false if you'd like to remove the responsiveness.\n$responsive:    true;\n// Set total number of columns in the grid.\n$grid-columns:  12;\n// Set the max width of the page using the px to em function in Bourbon.\n// The first value is the pixel value of the width and the second is the base font size of your theme.\n$font-size:     16px;\n$max-width-px:  2000px;\n$max-width:     em($max-width-px, $font-size);\n// Define breakpoints.\n// The last argument is the number of columns the grid will have for that screen size.\n// We've kept them all equal here.\n$mobile:   new-breakpoint(min-width em(320px, $font-size) $grid-columns);\n$narrow:   new-breakpoint(min-width em(560px, $font-size) $grid-columns);\n$wide:     new-breakpoint(min-width em(851px, $font-size) $grid-columns);\n$horizontal-bar-mode: new-breakpoint(min-width em(950px, $font-size) $grid-columns);\n*/\n\n\n// Neat Overrides\n$column: 90px;\n$gutter: 30px;\n$grid-columns: 12;\n$max-width: 1200px;\n\n// Neat Breakpoints\n$medium-screen: 600px;\n$large-screen: 900px;\n\n$medium-screen-up: new-breakpoint(min-width $medium-screen 4);\n$large-screen-up: new-breakpoint(min-width $large-screen 8);\n\n\n// Import grid to be used (Bourbon Neat) now that we've set our overrides.\n@import \"libraries/neat/neat\";\n","@charset \"UTF-8\";\n\n@if $border-box-sizing == true {\n  html { // http://bit.ly/1qk2tVR\n    box-sizing: border-box;\n  }\n\n  * {\n    &,\n    &::after,\n    &::before {\n      box-sizing: inherit;\n    }\n  }\n}\n","@import \"singularitygs\";\n@import \"compass\";\n@import \"breakpoint\";\n\n@import \"init\";\n\n// Import variables and mixins to be used (Bourbon).\n@import \"libraries/bourbon/bourbon\";\n@import \"libraries/neat/neat-helpers\";\n\n/*\n// Turn on Neat's visual grid for development.\n$visual-grid:       false;\n$visual-grid-color: #EEEEEE;\n// Set to false if you'd like to remove the responsiveness.\n$responsive:    true;\n// Set total number of columns in the grid.\n$grid-columns:  12;\n// Set the max width of the page using the px to em function in Bourbon.\n// The first value is the pixel value of the width and the second is the base font size of your theme.\n$font-size:     16px;\n$max-width-px:  2000px;\n$max-width:     em($max-width-px, $font-size);\n// Define breakpoints.\n// The last argument is the number of columns the grid will have for that screen size.\n// We've kept them all equal here.\n$mobile:   new-breakpoint(min-width em(320px, $font-size) $grid-columns);\n$narrow:   new-breakpoint(min-width em(560px, $font-size) $grid-columns);\n$wide:     new-breakpoint(min-width em(851px, $font-size) $grid-columns);\n$horizontal-bar-mode: new-breakpoint(min-width em(950px, $font-size) $grid-columns);\n*/\n\n// Neat Overrides\n$column: 90px;\n$gutter: 30px;\n$grid-columns: 12;\n$max-width: 1200px;\n\n// Neat Breakpoints\n$medium-screen: 600px;\n$large-screen: 900px;\n\n$medium-screen-up: new-breakpoint(min-width $medium-screen 4);\n$large-screen-up: new-breakpoint(min-width $large-screen 8);\n\n\n// Import grid to be used (Bourbon Neat) now that we've set our overrides.\n@import \"libraries/neat/neat\";\n\n@import \"./sass/variables/**/*.scss\";\n@import \"./sass/abstractions/**/*.scss\";\n@import \"./sass/base/base\";\n@import \"./sass/components/**/*.scss\";\n\n// Import variables, abstractions, base styles and components.\n// Uncomment the next lines and adjust them to your needs.\n//@import \"variables/{YOUR FILE NAME HERE}\";\n//@import \"abstractions/{YOUR FILE NAME HERE}\";\n//@import \"base/{YOUR FILE NAME HERE}\";\n//@import \"components/{YOUR FILE NAME HERE}\";\nbody {\n\t-webkit-font-smoothing: antialiased;\n\t/*background:blue;*/\n}\n","// Typography\n$base-font-family: $helvetica;\n$heading-font-family: $georgia;\n/*$heading-font-family: $base-font-family;*/\n\n// Font Sizes\n$base-font-size: 1em;\n\n// Line height\n$base-line-height: 1.5;\n$heading-line-height: 1.2;\n\n// Other Sizes\n$base-border-radius: 3px;\n$base-spacing: $base-line-height * 1em;\n$small-spacing: $base-spacing / 2;\n$base-z-index: 0;\n\n// Colors\n$blue: #477dca;\n$dark-gray: #333;\n$medium-gray: #999;\n$light-gray: #ddd;\n$red: #8B2004;\n$green: #5C8727;\n$yellow: #FBB040;\n\n// Font Colors\n$base-font-color: $dark-gray;\n$action-color: $red;\n\n// Border\n$base-border-color: $light-gray;\n$base-border: 1px solid $base-border-color;\n\n// Background Colors\n$base-background-color: #fff;\n$secondary-background-color: tint($base-border-color, 75%);\n\n// Forms\n$form-box-shadow: inset 0 1px 3px rgba(#000, 0.06);\n$form-box-shadow-focus: $form-box-shadow, 0 0 5px adjust-color($action-color, $lightness: -5%, $alpha: -0.3);\n\n// Animations\n$base-duration: 150ms;\n$base-timing: ease;\n","#{$all-buttons} {\n  appearance: none;\n  background-color: $action-color;\n  border: 0;\n  border-radius: $base-border-radius;\n  color: #fff;\n  cursor: pointer;\n  display: inline-block;\n  font-family: $base-font-family;\n  font-size: $base-font-size;\n  -webkit-font-smoothing: antialiased;\n  font-weight: 600;\n  line-height: 1;\n  padding: $small-spacing $base-spacing;\n  text-decoration: none;\n  transition: background-color $base-duration $base-timing;\n  user-select: none;\n  vertical-align: middle;\n  white-space: nowrap;\n\n  &:hover,\n  &:focus {\n    background-color: shade($action-color, 20%);\n    color: #fff;\n  }\n\n  &:disabled {\n    cursor: not-allowed;\n    opacity: 0.5;\n\n    &:hover {\n      background-color: $action-color;\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n/// Georgia font stack.\n///\n/// @type List\n\n$georgia: \"Georgia\", \"Cambria\", \"Times New Roman\", \"Times\", serif;\n\n/// Helvetica font stack.\n///\n/// @type List\n\n$helvetica: \"Helvetica Neue\", \"Helvetica\", \"Roboto\", \"Arial\", sans-serif;\n\n/// Lucida Grande font stack.\n///\n/// @type List\n\n$lucida-grande: \"Lucida Grande\", \"Tahoma\", \"Verdana\", \"Arial\", sans-serif;\n\n/// Monospace font stack.\n///\n/// @type List\n\n$monospace: \"Bitstream Vera Sans Mono\", \"Consolas\", \"Courier\", monospace;\n\n/// Verdana font stack.\n///\n/// @type List\n\n$verdana: \"Verdana\", \"Geneva\", sans-serif;\n","@charset \"UTF-8\";\n\n/// Mixes a color with black.\n///\n/// @param {Color} $color\n///\n/// @param {Number (Percentage)} $percent\n///   The amount of black to be mixed in.\n///\n/// @example scss - Usage\n///   .element {\n///     background-color: shade(#ffbb52, 60%);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     background-color: #664a20;\n///   }\n///\n/// @return {Color}\n\n@function shade($color, $percent) {\n  @return mix(#000, $color, $percent);\n}\n","fieldset {\n  background-color: $secondary-background-color;\n  border: $base-border;\n  margin: 0 0 $small-spacing;\n  padding: $base-spacing;\n}\n\ninput,\nlabel,\nselect {\n  display: block;\n  font-family: $base-font-family;\n  font-size: $base-font-size;\n}\n\nlabel {\n  font-weight: 600;\n  margin-bottom: $small-spacing / 2;\n\n  &.required::after {\n    content: \"*\";\n  }\n\n  abbr {\n    display: none;\n  }\n}\n\n#{$all-text-inputs},\nselect[multiple=multiple] {\n  background-color: $base-background-color;\n  border: $base-border;\n  border-radius: $base-border-radius;\n  box-shadow: $form-box-shadow;\n  box-sizing: border-box;\n  font-family: $base-font-family;\n  font-size: $base-font-size;\n  margin-bottom: $small-spacing;\n  padding: $base-spacing / 3;\n  transition: border-color $base-duration $base-timing;\n  width: 100%;\n\n  &:hover {\n    border-color: shade($base-border-color, 20%);\n  }\n\n  &:focus {\n    border-color: $action-color;\n    box-shadow: $form-box-shadow-focus;\n    outline: none;\n  }\n\n  &:disabled {\n    background-color: shade($base-background-color, 5%);\n    cursor: not-allowed;\n\n    &:hover {\n      border: $base-border;\n    }\n  }\n}\n\ntextarea {\n  resize: vertical;\n}\n\ninput[type=\"search\"] {\n  appearance: none;\n}\n\ninput[type=\"checkbox\"],\ninput[type=\"radio\"] {\n  display: inline;\n  margin-right: $small-spacing / 2;\n\n  + label {\n    display: inline-block;\n  }\n}\n\ninput[type=\"file\"] {\n  margin-bottom: $small-spacing;\n  width: 100%;\n}\n\nselect {\n  margin-bottom: $base-spacing;\n  max-width: 100%;\n  width: auto;\n}\n","@charset \"UTF-8\";\n\n/// Mixes a color with white.\n///\n/// @param {Color} $color\n///\n/// @param {Number (Percentage)} $percent\n///   The amount of white to be mixed in.\n///\n/// @example scss - Usage\n///   .element {\n///     background-color: tint(#6ecaa6, 40%);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     background-color: #a8dfc9;\n///   }\n///\n/// @return {Color}\n\n@function tint($color, $percent) {\n  @return mix(#fff, $color, $percent);\n}\n","ul,\nol {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n\n  &%default-ul {\n    list-style-type: disc;\n    margin-bottom: $small-spacing;\n    padding-left: $base-spacing;\n  }\n\n  &%default-ol {\n    list-style-type: decimal;\n    margin-bottom: $small-spacing;\n    padding-left: $base-spacing;\n  }\n}\n\ndl {\n  margin-bottom: $small-spacing;\n\n  dt {\n    font-weight: bold;\n    margin-top: $small-spacing;\n  }\n\n  dd {\n    margin: 0;\n  }\n}\n","table {\n  border-collapse: collapse;\n  font-feature-settings: \"kern\", \"liga\", \"tnum\";\n  margin: $small-spacing 0;\n  table-layout: fixed;\n  width: 100%;\n}\n\nth {\n  border-bottom: 1px solid shade($base-border-color, 25%);\n  font-weight: 600;\n  padding: $small-spacing 0;\n  text-align: left;\n}\n\ntd {\n  border-bottom: $base-border;\n  padding: $small-spacing 0;\n}\n\ntr,\ntd,\nth {\n  vertical-align: middle;\n}\n","body {\n\tcolor: $base-font-color;\n\tfont-family: $base-font-family;\n\tfont-feature-settings: \"kern\", \"liga\", \"pnum\";\n\tfont-size: $base-font-size;\n\tline-height: $base-line-height;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n\tfont-family: $heading-font-family;\n\tfont-size: $base-font-size;\n\tline-height: $heading-line-height;\n\tmargin: 0 0 $small-spacing;\n}\n\nh1 {\n\t/*font-family: $serif;*/\n\tfont-size: 1.9em;\n\tfont-weight: 500;\n\tmargin-bottom: 0.3em;\n\n\t@include media($medium-screen) {\n\t\tfont-size: 2.6em;\n\t}\n}\n\nh2 {\n\t/*font-family: $serif;*/\n\tfont-size: 1.3em;\n\tfont-weight: 400;\n\tline-height: 1.25em;\n\tmargin-bottom: .9em;\n\n\t@include media($medium-screen) {\n\t\tfont-size: 1.5em;\n\t}\n}\n\nh3 {\n\t/*font-family: $serif;*/\n\tfont-size: 1.4em;\n\tfont-style: italic;\n\tfont-weight: 400;\n\tline-height: 1.3em;\n\tmargin-bottom: 0.4em;\n}\n\np {\n\tmargin: 0 0 $small-spacing;\n}\n\na {\n\tcolor: $action-color;\n\ttext-decoration: none;\n\ttransition: color $base-duration $base-timing;\n\n\t&:active,\n\t&:focus,\n\t&:hover {\n\t\tcolor: shade($action-color, 25%);\n\t}\n}\n\nhr {\n\tborder-bottom: $base-border;\n\tborder-left: 0;\n\tborder-right: 0;\n\tborder-top: 0;\n\tmargin: $base-spacing 0;\n}\n\nimg,\npicture {\n\tmargin: 0;\n\tmax-width: 100%;\n}\n","@charset \"UTF-8\";\n\n/// Outputs a media-query block with an optional grid context (the total number of columns used in the grid).\n///\n/// @param {List} $query\n///   A list of media query features and values, where each `$feature` should have a corresponding `$value`.\n///   For a list of valid values for `$feature`, click [here](http://www.w3.org/TR/css3-mediaqueries/#media1).\n///\n///   If there is only a single `$value` in `$query`, `$default-feature` is going to be used.\n///\n///   The number of total columns in the grid can be set by passing `$columns` at the end of the list (overrides `$total-columns`).\n///\n///\n/// @param {Number (unitless)} $total-columns [$grid-columns]\n///   - Number of columns to use in the new grid context. Can be set as a shorthand in the first parameter.\n///\n/// @example scss - Usage\n///   .responsive-element {\n///      @include media(769px) {\n///        @include span-columns(6);\n///      }\n///   }\n///\n///  .new-context-element {\n///    @include media(min-width 320px max-width 480px, 6) {\n///      @include span-columns(6);\n///    }\n///  }\n///\n/// @example css - CSS Output\n///  @media screen and (min-width: 769px) {\n///    .responsive-element {\n///      display: block;\n///      float: left;\n///      margin-right: 2.35765%;\n///      width: 48.82117%;\n///    }\n///\n///    .responsive-element:last-child {\n///      margin-right: 0;\n///    }\n///  }\n///\n///  @media screen and (min-width: 320px) and (max-width: 480px) {\n///    .new-context-element {\n///      display: block;\n///      float: left;\n///      margin-right: 4.82916%;\n///      width: 100%;\n///    }\n///\n///    .new-context-element:last-child {\n///      margin-right: 0;\n///    }\n///  }\n\n@mixin media($query: $feature $value $columns, $total-columns: $grid-columns) {\n  @if length($query) == 1 {\n    @media screen and ($default-feature: nth($query, 1)) {\n      $default-grid-columns: $grid-columns;\n      $grid-columns: $total-columns !global;\n      @content;\n      $grid-columns: $default-grid-columns !global;\n    }\n  } @else {\n    $loop-to: length($query);\n    $media-query: \"screen and \";\n    $default-grid-columns: $grid-columns;\n    $grid-columns: $total-columns !global;\n\n    @if is-not(is-even(length($query))) {\n      $grid-columns: nth($query, $loop-to) !global;\n      $loop-to: $loop-to - 1;\n    }\n\n    $i: 1;\n    @while $i <= $loop-to {\n      $media-query: $media-query + \"(\" + nth($query, $i) + \": \" + nth($query, $i + 1) + \") \";\n\n      @if ($i + 1) != $loop-to {\n        $media-query: $media-query + \"and \";\n      }\n\n      $i: $i + 2;\n    }\n\n    @media #{$media-query} {\n      @content;\n      $grid-columns: $default-grid-columns !global;\n    }\n  }\n}\n",".l-footer-wrapper {\nbackground: $dark-gray;\n}\n",".nav-wrapper {\n\tbackground: #333;\n}\n\n.l-region--navigation .menu {\n\t/*background:#ccc;*/\n\t@include horizontal-list;\n\n\ta {\n\t\tcolor: #fff;\n\t}\n}\n\n.l-region--sidebar-first {\n\tbackground: #ccc;\n}\n\n$visual-grid: true;\n\n.site-branding {\n\t@include outer-container;\n\n\t.site-branding__logo {\n\t\t@include span-columns(4);\n\t}\n}\n.site-branding__name {\n    font-size: 2em;\n    line-height: 1;\n}\n\n.site-branding__slogan {\n    margin: 0;\n    font-size: 1.5em;\n    display: inline-block;\n    line-height: 1;\n}\n","// Based on [Eric Meyer's reset 2.0](http://meyerweb.com/eric/tools/css/reset/index.html)\n// Global reset rules.\n// For more specific resets, use the reset mixins provided below\n@mixin global-reset {\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed, \n  figure, figcaption, footer, header, hgroup, \n  menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n    @include reset-box-model;\n    @include reset-font; }\n  // Unlike Eric's original reset, we reset the html element to be compatible\n  // with the vertical rhythm mixins.\n  html {\n    @include reset-body; }\n  ol, ul {\n    @include reset-list-style; }\n  table {\n    @include reset-table; }\n  caption, th, td {\n    @include reset-table-cell; }\n  q, blockquote {\n    @include reset-quotation; }\n  a img {\n    @include reset-image-anchor-border; }\n  @include reset-html5; }\n\n// Reset all elements within some selector scope. To reset the selector itself,\n// mixin the appropriate reset mixin for that element type as well. This could be\n// useful if you want to style a part of your page in a dramatically different way.\n@mixin nested-reset {\n  div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed, \n  figure, figcaption, footer, header, hgroup, \n  menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n    @include reset-box-model;\n    @include reset-font; }\n  table {\n    @include reset-table; }\n  caption, th, td {\n    @include reset-table-cell; }\n  q, blockquote {\n    @include reset-quotation; }\n  a img {\n    @include reset-image-anchor-border; } }\n\n// Reset the box model measurements.\n@mixin reset-box-model {\n  margin: 0;\n  padding: 0;\n  border: 0; }\n\n// Reset the font and vertical alignment.\n@mixin reset-font {\n  font: inherit;\n  font-size: 100%;\n  vertical-align: baseline; }\n\n// Resets the outline when focus.\n// For accessibility you need to apply some styling in its place.\n@mixin reset-focus {\n  outline: 0; }\n\n// Reset a body element.\n@mixin reset-body {\n  line-height: 1; }\n\n// Reset the list style of an element.\n@mixin reset-list-style {\n  list-style: none; }\n\n// Reset a table\n@mixin reset-table {\n  border-collapse: collapse;\n  border-spacing: 0; }\n\n// Reset a table cell (`th`, `td`)\n@mixin reset-table-cell {\n  text-align: left;\n  font-weight: normal;\n  vertical-align: middle; }\n\n// Reset a quotation (`q`, `blockquote`)\n@mixin reset-quotation {\n  quotes: none;\n  &:before, &:after {\n    content: \"\"; \n    content: none; } }\n\n// Resets the border.\n@mixin reset-image-anchor-border {\n  border: none; }\n\n// Unrecognized elements are displayed inline.\n// This reset provides a basic reset for block html5 elements\n// so they are rendered correctly in browsers that don't recognize them\n// and reset in browsers that have default styles for them.\n@mixin reset-html5 {\n  #{elements-of-type(html5-block)} {\n    display: block; } }\n\n// Resets the display of inline and block elements to their default display\n// according to their tag type. Elements that have a default display that varies across\n// versions of html or browser are not handled here, but this covers the 90% use case.\n// Usage Example:\n//\n//     // Turn off the display for both of these classes\n//     .unregistered-only, .registered-only\n//       display: none\n//     // Now turn only one of them back on depending on some other context.\n//     body.registered\n//       +reset-display(\".registered-only\")\n//     body.unregistered\n//       +reset-display(\".unregistered-only\")\n@mixin reset-display($selector: \"\", $important: false) {\n  #{append-selector(elements-of-type(\"inline\"), $selector)} {\n    @if $important {\n      display: inline !important; }\n    @else {\n      display: inline; } }\n  #{append-selector(elements-of-type(\"block\"), $selector)} {\n    @if $important {\n      display: block !important; }\n    @else {\n      display: block; } } }\n","@charset \"UTF-8\";\n\n/// Provides an easy way to include a clearfix for containing floats.\n///\n/// @link http://cssmojo.com/latest_new_clearfix_so_far/\n///\n/// @example scss - Usage\n///   .element {\n///     @include clearfix;\n///   }\n///\n/// @example css - CSS Output\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: table;\n///   }\n\n@mixin clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: table;\n  }\n}\n","// Turn off the bullet for an element of a list\n@mixin no-bullet {\n  list-style-image : none;\n  list-style-type  : none;\n  margin-left      : 0;\n}\n\n// turns off the bullets for an entire list\n@mixin no-bullets {\n  list-style: none;\n  li { @include no-bullet; }\n}\n\n// Make a list(ul/ol) have an image bullet.\n//\n// The mixin should be used like this for an icon that is 5x7:\n//\n//     ul.pretty\n//       +pretty-bullets(\"my-icon.png\", 5px, 7px)\n//\n// Additionally, if the image dimensions are not provided,\n// The image dimensions will be extracted from the image itself.\n//\n//     ul.pretty\n//       +pretty-bullets(\"my-icon.png\")\n//\n@mixin pretty-bullets($bullet-icon, $width: image-width($bullet-icon), $height: image-height($bullet-icon), $line-height: 18px, $padding: 14px) {\n  margin-left: 0;\n  li {\n    padding-left: $padding;\n    background: image-url($bullet-icon) no-repeat ($padding - $width) / 2 ($line-height - $height) / 2;\n    list-style-type: none;\n  }\n}\n","// Horizontal list layout module.\n//\n// Easy mode using simple descendant li selectors:\n//\n//   ul.nav\n//     +horizontal-list\n//\n// Advanced mode:\n// If you need to target the list items using a different selector then use\n// +horizontal-list-container on your ul/ol and +horizontal-list-item on your li.\n// This may help when working on layouts involving nested lists. For example:\n//\n//   ul.nav\n//     +horizontal-list-container\n//     > li\n//       +horizontal-list-item\n\n@import \"bullets\";\n@import \"../../utilities/general/clearfix\";\n@import \"../../utilities/general/reset\";\n@import \"../../utilities/general/float\";\n\n// Can be mixed into any selector that target a ul or ol that is meant\n// to have a horizontal layout. Used to implement +horizontal-list.\n@mixin horizontal-list-container {\n  @include reset-box-model;\n  @include clearfix; }\n\n// Can be mixed into any li selector that is meant to participate in a horizontal layout.\n// Used to implement +horizontal-list.\n//\n// :last-child is not fully supported\n// see http://www.quirksmode.org/css/contents.html#t29 for the support matrix\n//\n// IE8 ignores rules that are included on the same line as :last-child\n// see http://www.richardscarrott.co.uk/posts/view/ie8-last-child-bug for details\n//\n// Setting `$padding` to `false` disables the padding between list elements\n@mixin horizontal-list-item($padding: 4px, $direction: left) {\n  @include no-bullet;\n  white-space: nowrap;\n  @include float($direction);\n  @if $padding {\n    padding: {\n      left: $padding;\n      right: $padding;\n    }\n    &:first-child, &.first { padding-#{$direction}: 0; }\n    &:last-child { padding-#{opposite-position($direction)}: 0; }\n    &.last { padding-#{opposite-position($direction)}: 0; }\n  }\n}\n\n// A list(ol,ul) that is layed out such that the elements are floated left and won't wrap.\n// This is not an inline list.\n//\n// Setting `$padding` to `false` disables the padding between list elements\n@mixin horizontal-list($padding: 4px, $direction: left) {\n  @include horizontal-list-container;\n  li {\n    @include horizontal-list-item($padding, $direction); } }\n","// Implementation of float:left with fix for the\n// [double-margin bug in IE5/6](http://www.positioniseverything.net/explorer/doubled-margin.html)\n@mixin float-left {\n  @include float(left); }\n\n// Implementation of float:right with fix for the\n// [double-margin bug in IE5/6](http://www.positioniseverything.net/explorer/doubled-margin.html)\n@mixin float-right {\n  @include float(right); }\n\n// Direction independent float mixin that fixes the\n// [double-margin bug in IE5/6](http://www.positioniseverything.net/explorer/doubled-margin.html)\n@mixin float($side: left) {\n  display: inline;\n  float: unquote($side); }\n\n// Resets floated elements back to their default of `float: none` and defaults\n// to `display: block` unless you pass `inline` as an argument\n//\n// Usage Example:\n//\n//     body.homepage\n//       #footer li\n//         +float-left\n//     body.signup\n//       #footer li\n//         +reset-float\n@mixin reset-float($display: block) {\n  float: none;\n  display: $display; }","@charset \"UTF-8\";\n\n/// Makes an element a outer container by centring it in the viewport, clearing its floats, and setting its `max-width`.\n/// Although optional, using `outer-container` is recommended. The mixin can be called on more than one element per page, as long as they are not nested.\n///\n/// @param {Number [unit]} $local-max-width [$max-width]\n///   Max width to be applied to the element. Can be a percentage or a measure.\n///\n/// @example scss - Usage\n///   .element {\n///     @include outer-container(100%);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     *zoom: 1;\n///     max-width: 100%;\n///     margin-left: auto;\n///     margin-right: auto;\n///   }\n///\n///   .element:before, .element:after {\n///     content: \" \";\n///     display: table;\n///   }\n///\n///   .element:after {\n///     clear: both;\n///   }\n\n@mixin outer-container($local-max-width: $max-width) {\n  @include clearfix;\n  max-width: $local-max-width;\n  margin: {\n    left: auto;\n    right: auto;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Specifies the number of columns an element should span. If the selector is nested the number of columns of its parent element should be passed as an argument as well.\n///\n/// @param {List} $span\n///   A list containing `$columns`, the unitless number of columns the element spans (required), and `$container-columns`, the number of columns the parent element spans (optional).\n///\n///   If only one value is passed, it is assumed that it's `$columns` and that that `$container-columns` is equal to `$grid-columns`, the total number of columns in the grid.\n///\n///   The values can be separated with any string such as `of`, `/`, etc.\n///\n///   `$columns` also accepts decimals for when it's necessary to break out of the standard grid. E.g. Passing `2.4` in a standard 12 column grid will divide the row into 5 columns.\n///\n/// @param {String} $display [block]\n///   Sets the display property of the element. By default it sets the display propert of the element to `block`.\n///\n///   If passed `block-collapse`, it also removes the margin gutter by adding it to the element width.\n///\n///   If passed `table`, it sets the display property to `table-cell` and calculates the width of the element without taking gutters into consideration. The result does not align with the block-based grid.\n///\n/// @example scss - Usage\n///   .element {\n///     @include span-columns(6);\n///\n///    .nested-element {\n///      @include span-columns(2 of 6);\n///    }\n///  }\n///\n/// @example css - CSS Output\n///   .element {\n///     display: block;\n///     float: left;\n///     margin-right: 2.35765%;\n///     width: 48.82117%;\n///   }\n///\n///   .element:last-child {\n///     margin-right: 0;\n///   }\n///\n///   .element .nested-element {\n///     display: block;\n///     float: left;\n///     margin-right: 4.82916%;\n///     width: 30.11389%;\n///   }\n///\n///   .element .nested-element:last-child {\n///     margin-right: 0;\n///   }\n\n@mixin span-columns($span: $columns of $container-columns, $display: block) {\n  $columns: nth($span, 1);\n  $container-columns: container-span($span);\n\n  $parent-columns: get-parent-columns($container-columns) !global;\n\n  $direction: get-direction($layout-direction, $default-layout-direction);\n  $opposite-direction: get-opposite-direction($direction);\n\n  $display-table: is-display-table($container-display-table, $display);\n\n  @if $display-table  {\n    display: table-cell;\n    width: percentage($columns / $container-columns);\n  } @else {\n    float: #{$opposite-direction};\n\n    @if $display != no-display {\n      display: block;\n    }\n\n    @if $display == collapse {\n      @include -neat-warn(\"The 'collapse' argument will be deprecated. Use 'block-collapse' instead.\");\n    }\n\n    @if $display == collapse or $display == block-collapse {\n      width: flex-grid($columns, $container-columns) + flex-gutter($container-columns);\n\n      &:last-child {\n        width: flex-grid($columns, $container-columns);\n      }\n\n    } @else {\n      margin-#{$direction}: flex-gutter($container-columns);\n      width: flex-grid($columns, $container-columns);\n\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    }\n  }\n}\n","$parent-columns: $grid-columns !default;\n$fg-column: $column;\n$fg-gutter: $gutter;\n$fg-max-columns: $grid-columns;\n$container-display-table: false !default;\n$layout-direction: LTR !default;\n\n@function flex-grid($columns, $container-columns: $fg-max-columns) {\n  $width: $columns * $fg-column + ($columns - 1) * $fg-gutter;\n  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;\n  @return percentage($width / $container-width);\n}\n\n@function flex-gutter($container-columns: $fg-max-columns, $gutter: $fg-gutter) {\n  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;\n  @return percentage($gutter / $container-width);\n}\n\n@function grid-width($n) {\n  @return $n * $gw-column + ($n - 1) * $gw-gutter;\n}\n\n@function get-parent-columns($columns) {\n  @if $columns != $grid-columns {\n    $parent-columns: $columns !global;\n  } @else {\n    $parent-columns: $grid-columns !global;\n  }\n\n  @return $parent-columns;\n}\n\n@function is-display-table($container-is-display-table, $display) {\n  @return $container-is-display-table == true or $display == table;\n}\n","form#search-block-form {\n    width: 300px;\n}\n\ninput#edit-search-block-form--2 {\n    width: 176px;\n    float: left;\n    margin-right: .5em;\n}\n","body {\n/*background:blue;*/\n}\n"],"sourceRoot":"/source/"}